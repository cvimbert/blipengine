/* global datas, _ */

var GameManager = function () {

    this.sprites = [];
    this.spritesList = [];
    this.groups = [];
    this.groupStates = [];
    this.sequences = [];

    this.variables = [];
    this.controls = [];
    this.controlsList = [];
    this.actions = [];
    this.conditions = [];
    this.triggers = [];

    this.conditionalGroupStates = [];

    var gameClock;

    var manager = this;

    var Clock = function () {
        var interv;
        var period = 300;

        var callbacks = [];

        this.start = function () {
            interv = setInterval(onInterval, period);
        };

        this.stop = function () {
            clearInterval(interv);
        };

        this.listen = function (callback) {
            callbacks.push(callback);
        };

        this.stopListen = function (callback) {
            var callIndex = callbacks.lastIndexOf(callback);
            callbacks.splice(callIndex, 1);
        };

        function onInterval() {
            _.each(callbacks, function (callb) {
                callb();
            });
        }
    };

    var Condition = function (condDef) {

        this.def = condDef;

        this.isConditionFulfilled = function () {

            switch (condDef.type) {
                case "variablecheck":
                    var evalStr = manager.variables[condDef.variable].value;
                    evalStr += condDef.operator;
                    evalStr += condDef.value;
                    var res = eval(evalStr);
                    return res;

                case "groupstate":

                    break;

                case "sequencestep":
                    var seq = manager.sequences[condDef.sequence];
                    return seq.getCurrentStep().def.id === condDef.step;
            }
        };
    };

    var Variable = function (varDef) {

        this.def = varDef;

        this.initialValue = varDef.value;
        this.value = varDef.value;

        this.reset = function () {
            this.value = this.initialValue;
        };
    };

    var Control = function (contDef) {

        this.controlObj = $("#control-" + contDef.keyid);
        this.def = contDef;

        this.enable = function () {

        };

        this.disable = function () {

        };
    };

    var Trigger = function (triggerDef) {

        this.def = triggerDef;
        var act = manager.actions[triggerDef.action];

        var cond;

        if (triggerDef.condition) {
            cond = manager.conditions[triggerDef.condition];
        }


        this.enable = function () {

            // temporaire
            switch (triggerDef.type) {
                case "controlclick":
                    var cont = manager.controls[triggerDef.control];

                    cont.controlObj.on("touchstart", function () {
                        if (!cond || cond.isConditionFulfilled()) {
                            act.launch();
                        }
                    });

                    break;

                case "clock":
                    gameClock.listen(function () {
                        if (!cond || cond.isConditionFulfilled()) {
                            act.launch();
                        }
                    });

                    break;
            }
        };

        this.disable = function () {
            // temporaire aussi, mais vide pour le moment

        };
    };

    var Action = function (actDef) {

        this.def = actDef;
        
        var cond;
        
        if (actDef.condition) {
            cond = manager.conditions[actDef.condition];
        }

        this.launch = function () {
            
            if (cond && !cond.isConditionFulfilled()) {
                return;
            }

            switch (actDef.type) {
                case "displaysprite":
                    manager.sprites[actDef.sprite].enable();
                    break;

                case "nextinsequence":
                    manager.sequences[actDef.sequence].displayNext();
                    break;

                case "previousinsequence":
                    manager.sequences[actDef.sequence].displayPrevious();
                    break;

                case "nextloop":
                    manager.sequences[actDef.sequence].nextLoop();
                    break;

                case "randomaction":
                    var rnd = Math.floor(Math.random() * actDef.actions.length);
                    var choosenAction = manager.actions[actDef.actions[rnd]];
                    choosenAction.launch();
                    break;
                    
                case "incvariable":
                    manager.variables[actDef.variable].value++;
                    break;
                    
                case "decvariable":
                    manager.variables[actDef.variable].value--;
                    break;

                case "actions":
                    _.each(actDef.actions, function (act) {
                        manager.actions[act].launch();
                    });
                    break;
            }
        };
    };

    var Sprite = function (spriteDef) {

        this.spriteObj = $("#sprite-" + spriteDef.id);

        this.enable = function () {
            this.spriteObj.addClass("enabled");
        };

        this.disable = function () {
            this.spriteObj.removeClass("enabled");
        };
    };

    var SpritesGroup = function (groupDef) {

        var sprites = [];

        //this.states = [];
        this.currentState = "";

        var spg = this;

        _.each(groupDef.sprites, function (spriteid) {
            sprites.push(manager.sprites[spriteid]);
        });

        this.showAll = function () {
            _.each(sprites, function (sprite) {
                sprite.enable();
            });
        };

        this.hideAll = function () {
            _.each(sprites, function (sprite) {
                sprite.disable();
            });
        };

        this.hasState = function (state) {
            //return spg.states.lastIndexOf(state) !== -1;

            return spg.currentState === state;
        };

        /*this.addState = function (state) {
         if (!spg.hasState(state)) {
         spg.states.push(state);
         }
         };
         
         this.removeState = function (state) {
         var ind = spg.states.lastIndexOf(state);
         
         if (ind !== -1) {
         spg.states.splice(ind, 1);
         }
         };*/
    };

    var ConditionalGroupState = function (cgsDef) {

        this.def = cgsDef;
        this.states = [];
        this.statesList = [];
        this.group = manager.groups[cgsDef.group];

        var cstate = this;

        _.each(cgsDef.states, function (state) {
            cstate.states[state] = new ConditionalState(state);
            cstate.statesList.push(cstate.states[state]);
        });

        this.defaultState = manager.groupStates[cgsDef.default.state];

        this.chooseState = function () {

            // choix du premier Ã©tat remplissant ses conditions
            for (var i = 0; i < cstate.statesList.length; i++) {
                var state = cstate.statesList[i];

                if (state.condition.isConditionFulfilled()) {
                    return state.state;
                }
            }

            // cas par default
            return cstate.defaultState;
        };

        this.show = function () {
            var choosenState = cstate.chooseState();
            choosenState.show();
        };
    };

    var ConditionalState = function (csDef) {

        this.state = manager.groupStates[csDef.state];
        this.condition = manager.conditions[csDef.condition];
    };

    var GroupState = function (stateDef) {

        this.def = stateDef;
        var sprites = [];

        var gs = this;

        this.group = manager.groups[stateDef.group];

        _.each(stateDef.sprites, function (spriteid) {
            sprites.push(manager.sprites[spriteid]);
        });

        this.show = function () {
            _.each(sprites, function (sprite) {
                sprite.enable();
            });
        };
    };

    var Sequence = function (seqDef) {

        var steps = [];
        var currentStepIndex = 0;
        var loopDirection = "in";

        this.group = manager.groups[seqDef.group];

        var seq = this;

        _.each(seqDef.steps, function (stepid) {
            if (stepid !== "") {
                steps.push(manager.groupStates[stepid]);
            } else {
                steps.push(null);
            }
        });

        function displayIndex() {
            var step = steps[currentStepIndex];
            seq.group.hideAll();

            if (step) {
                step.show();
            }
        }

        this.getCurrentStep = function () {
            return steps[currentStepIndex];
        };

        this.nextLoop = function () {
            if (loopDirection === "in") {
                if (!seq.displayNext()) {
                    loopDirection = "out";
                    seq.nextLoop();
                }
            } else if (loopDirection === "out") {
                if (!seq.displayPrevious()) {
                    loopDirection = "in";
                    seq.nextLoop();
                }
            }
        };

        this.displayNext = function () {
            if (currentStepIndex < steps.length - 1) {
                currentStepIndex++;
                displayIndex();
                return true;
            }

            return false;
        };

        this.displayPrevious = function () {
            if (currentStepIndex > 0) {
                currentStepIndex--;
                displayIndex();
                return true;
            }

            return false;
        };

        this.launch = function (time) {
            var counter = 0;

            var interv = setInterval(function () {

                var step = steps[counter];
                step.group.hideAll();
                step.show();
                counter++;

                if (counter >= steps.length) {
                    clearInterval(interv);
                }

            }, time);
        };

        this.reverseLaunch = function (time) {
            var counter = steps.length - 1;

            var interv = setInterval(function () {

                var step = steps[counter];
                step.group.hideAll();
                step.show();
                counter--;

                if (counter < 0) {
                    clearInterval(interv);
                }

            }, time);
        };
    };

    var obj = this;

    // indexation des donnÃ©es

    // sprites
    _.each(datas.layout.sprites, function (sp) {
        obj.sprites[sp.id] = new Sprite(sp);
        obj.spritesList.push(obj.sprites[sp.id]);
    });

    // groups
    _.each(datas.layout.groups, function (group) {
        obj.groups[group.id] = new SpritesGroup(group);
    });

    //group states
    _.each(datas.layout.groupstates, function (state) {
        obj.groupStates[state.id] = new GroupState(state);
    });

    // controls
    _.each(datas.controller.controls, function (cont) {
        obj.controls[cont.id] = new Control(cont);
        obj.controlsList.push(obj.controls[cont.id]);
    });

    // variables
    _.each(datas.controller.variables, function (variable) {
        obj.variables[variable.id] = new Variable(variable);
    });
    
    // conditions
    _.each(datas.controller.conditions, function (cond) {
        obj.conditions[cond.id] = new Condition(cond);
    });

    // actions
    _.each(datas.controller.actions, function (act) {
        obj.actions[act.id] = new Action(act);
    });

    // conditional group states
    _.each(datas.layout.conditionalgroupstates, function (cgs) {
        obj.conditionalGroupStates[cgs.id] = new ConditionalGroupState(cgs);
        obj.groupStates[cgs.id] = obj.conditionalGroupStates[cgs.id];
    });

    // sequences
    _.each(datas.layout.sequences, function (seq) {
        obj.sequences[seq.id] = new Sequence(seq);
    });

    // triggers
    _.each(datas.controller.triggers, function (trigger) {
        obj.triggers[trigger.id] = new Trigger(trigger);
    });


    this.gameStart = function () {

        gameClock = new Clock();
        gameClock.start();

        _.each(datas.controller.initactions, function (action) {
            manager.actions[action].launch();
        });

        _.each(datas.controller.inittriggers, function (trigger) {
            manager.triggers[trigger].enable();
        });

        _.each(datas.controller.initstates, function (state) {
            manager.groupStates[state].show();
        });
    };

    this.showAll = function () {
        _.each(obj.spritesList, function (sprite) {
            sprite.enable();
        });
    };

    this.hideAll = function () {
        _.each(obj.spritesList, function (sprite) {
            sprite.disable();
        });
    };
    
    this.gameStart();
};


