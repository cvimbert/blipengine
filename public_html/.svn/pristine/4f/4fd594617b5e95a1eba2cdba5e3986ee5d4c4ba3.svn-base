/* global datas, _ */

var GameManager = function () {

    this.sprites = [];
    this.spritesList = [];
    this.groups = [];
    this.groupStates = [];
    this.sequences = [];

    this.variables = [];
    this.controls = [];
    this.controlsList = [];
    this.actions = [];
    this.conditions = [];

    var manager = this;

    var Condition = function (condDef) {

        this.def = condDef;

        this.isConditionFulfilled = function () {

            switch (condDef.type) {
                case "variablecheck":
                    var evalStr = manager.variables[condDef.variable].value;
                    evalStr += condDef.operator;
                    evalStr += condDef.value;
                    return eval(evalStr);
            }
        };
    };

    var Variable = function (varDef) {

        this.def = varDef;

        this.value = varDef.value;
    };

    var Control = function (contDef) {

        this.controlObj = $("#control-" + contDef.keyid);
        this.def = contDef;
    };

    var Action = function (actDef) {

        this.def = actDef;
    };

    var Sprite = function (spriteDef) {

        this.spriteObj = $("#sprite-" + spriteDef.id);

        this.enable = function () {
            this.spriteObj.addClass("enabled");
        };

        this.disable = function () {
            this.spriteObj.removeClass("enabled");
        };
    };

    var SpritesGroup = function (groupDef) {

        var sprites = [];

        _.each(groupDef.sprites, function (spriteid) {
            sprites.push(manager.sprites[spriteid]);
        });

        this.showAll = function () {
            _.each(sprites, function (sprite) {
                sprite.enable();
            });
        };

        this.hideAll = function () {
            _.each(sprites, function (sprite) {
                sprite.disable();
            });
        };
    };

    var GroupState = function (stateDef) {

        var sprites = [];

        this.group = manager.groups[stateDef.group];

        _.each(stateDef.sprites, function (spriteid) {
            sprites.push(manager.sprites[spriteid]);
        });

        this.show = function () {
            _.each(sprites, function (sprite) {
                sprite.enable();
            });
        };
    };

    var Sequence = function (seqDef) {

        var steps = [];

        this.group = manager.groups[seqDef.group];

        _.each(seqDef.steps, function (stepid) {
            steps.push(manager.groupStates[stepid]);
        });

        this.launch = function (time) {
            var counter = 0;

            var interv = setInterval(function () {

                var step = steps[counter];
                step.group.hideAll();
                step.show();
                counter++;

                if (counter >= steps.length) {
                    clearInterval(interv);
                }

            }, time);
        };

        this.reverseLaunch = function (time) {
            var counter = steps.length - 1;

            var interv = setInterval(function () {

                var step = steps[counter];
                step.group.hideAll();
                step.show();
                counter--;

                if (counter < 0) {
                    clearInterval(interv);
                }

            }, time);
        };
    };

    var obj = this;

    // indexation des données

    // sprites
    _.each(datas.layout.sprites, function (sp) {
        obj.sprites[sp.id] = new Sprite(sp);
        obj.spritesList.push(obj.sprites[sp.id]);
    });

    // groups
    _.each(datas.layout.groups, function (group) {
        obj.groups[group.id] = new SpritesGroup(group);
    });

    //group states
    _.each(datas.layout.groupstates, function (state) {
        obj.groupStates[state.id] = new GroupState(state);
    });

    // sequences
    _.each(datas.layout.sequences, function (seq) {
        obj.sequences[seq.id] = new Sequence(seq);
    });

    // controls
    _.each(datas.controller.controls, function (cont) {
        obj.controls[cont.id] = new Control(cont);
        obj.controlsList.push(obj.controls[cont.id]);
    });

    // variables
    _.each(datas.controller.variables, function (variable) {
        obj.variables[variable.id] = new Variable(variable);
    });

    // actions
    _.each(datas.controller.actions, function (act) {
        obj.actions[act.id] = new Action(act);
    });

    // conditions
    _.each(datas.controller.conditions, function (cond) {
        obj.conditions[cond.id] = new Condition(cond);
    });


    this.gameStart = function () {
        // on initialise la scene

        // on met en place tous les contrôles

    };

    this.showAll = function () {
        _.each(obj.spritesList, function (sprite) {
            sprite.enable();
        });
    };

    this.hideAll = function () {
        _.each(obj.spritesList, function (sprite) {
            sprite.disable();
        });
    };
};


