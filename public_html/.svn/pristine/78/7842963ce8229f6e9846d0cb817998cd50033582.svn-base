/* global datas, _ */

var GameManager = function () {

    this.sprites = [];
    this.spritesList = [];
    this.groups = [];
    this.groupStates = [];
    this.sequences = [];

    this.variables = [];
    this.controls = [];
    this.controlsList = [];
    this.actions = [];
    this.conditions = [];
    this.triggers = [];

    this.conditionalGroupStates = [];

    var manager = this;

    var Condition = function (condDef) {

        this.def = condDef;

        this.isConditionFulfilled = function () {

            switch (condDef.type) {
                case "variablecheck":
                    var evalStr = manager.variables[condDef.variable].value;
                    evalStr += condDef.operator;
                    evalStr += condDef.value;
                    var res = eval(evalStr);
                    return res;
            }
        };
    };

    var Variable = function (varDef) {

        this.def = varDef;

        this.initialValue = varDef.value;
        this.value = varDef.value;

        this.reset = function () {
            this.value = this.initialValue;
        };
    };

    var Control = function (contDef) {

        this.controlObj = $("#control-" + contDef.keyid);
        this.def = contDef;

        this.enable = function () {

        };

        this.disable = function () {

        };
    };

    var Trigger = function (triggerDef) {

        this.def = triggerDef;

        this.enable = function () {
            
            // temporaire
            switch(triggerDef.type) {
                case "controlclick":
                    var cont = manager.controls[triggerDef.control];
                    var act = manager.actions[triggerDef.action];
                    
                    cont.controlObj.on("click", function() {
                        act.launch();
                    });
                    
                    break;
            }
        };

        this.disable = function () {
            // temporaire aussi, mais vide pour le moment
            
        };
    };

    var Action = function (actDef) {

        this.def = actDef;

        this.launch = function () {

            switch (actDef.type) {
                case "displaysprite":
                    manager.sprites[actDef.sprite].enable();
                    break;
                    
                case "nextinsequence":
                    manager.sequences[actDef.sequence].displayNext();
                    break;
                    
                case "previousinsequence":
                    manager.sequences[actDef.sequence].displayPrevious();
                    break;
            }
        };
    };

    var Sprite = function (spriteDef) {

        this.spriteObj = $("#sprite-" + spriteDef.id);

        this.enable = function () {
            this.spriteObj.addClass("enabled");
        };

        this.disable = function () {
            this.spriteObj.removeClass("enabled");
        };
    };

    var SpritesGroup = function (groupDef) {

        var sprites = [];

        _.each(groupDef.sprites, function (spriteid) {
            sprites.push(manager.sprites[spriteid]);
        });

        this.showAll = function () {
            _.each(sprites, function (sprite) {
                sprite.enable();
            });
        };

        this.hideAll = function () {
            _.each(sprites, function (sprite) {
                sprite.disable();
            });
        };
    };

    var ConditionalGroupState = function (cgsDef) {

        this.def = cgsDef;
        this.states = [];
        this.statesList = [];
        this.group = cgsDef.group;

        var cstate = this;

        _.each(cgsDef.states, function (state) {
            cstate.states[state] = new ConditionalState(state);
            cstate.statesList.push(cstate.states[state]);
        });

        this.defaultState = manager.groupStates[cgsDef.default.state];

        this.chooseState = function () {

            // choix du premier état remplissant ses conditions
            for (var i = 0; i < cstate.statesList.length; i++) {
                var state = cstate.statesList[i];

                if (state.condition.isConditionFulfilled()) {
                    return state.state;
                }
            }

            // cas par default
            return cstate.defaultState;
        };

        this.show = function () {
            var choosenState = cstate.chooseState();
            choosenState.show();
        };
    };

    var ConditionalState = function (csDef) {

        this.state = manager.groupStates[csDef.state];
        this.condition = manager.conditions[csDef.condition];
    };

    var GroupState = function (stateDef) {

        this.def = stateDef;
        var sprites = [];

        this.group = manager.groups[stateDef.group];

        _.each(stateDef.sprites, function (spriteid) {
            sprites.push(manager.sprites[spriteid]);
        });

        this.show = function () {
            _.each(sprites, function (sprite) {
                sprite.enable();
            });
        };
    };

    var Sequence = function (seqDef) {

        var steps = [];
        var currentStepIndex = 0;

        this.group = manager.groups[seqDef.group];

        _.each(seqDef.steps, function (stepid) {
            steps.push(manager.groupStates[stepid]);
        });

        function displayIndex() {
            var step = steps[currentStepIndex];
            manager.groups[step.group].hideAll();
            step.show();
        }

        this.displayNext = function () {
            if (currentStepIndex < steps.length - 1) {
                currentStepIndex++;
                displayIndex();
            }
        };

        this.displayPrevious = function () {
            if (currentStepIndex > 0) {
                currentStepIndex--;
                displayIndex();
            }
        };

        this.launch = function (time) {
            var counter = 0;

            var interv = setInterval(function () {

                var step = steps[counter];
                step.group.hideAll();
                step.show();
                counter++;

                if (counter >= steps.length) {
                    clearInterval(interv);
                }

            }, time);
        };

        this.reverseLaunch = function (time) {
            var counter = steps.length - 1;

            var interv = setInterval(function () {

                var step = steps[counter];
                step.group.hideAll();
                step.show();
                counter--;

                if (counter < 0) {
                    clearInterval(interv);
                }

            }, time);
        };
    };

    var obj = this;

    // indexation des données

    // sprites
    _.each(datas.layout.sprites, function (sp) {
        obj.sprites[sp.id] = new Sprite(sp);
        obj.spritesList.push(obj.sprites[sp.id]);
    });

    // groups
    _.each(datas.layout.groups, function (group) {
        obj.groups[group.id] = new SpritesGroup(group);
    });

    //group states
    _.each(datas.layout.groupstates, function (state) {
        obj.groupStates[state.id] = new GroupState(state);
    });

    // controls
    _.each(datas.controller.controls, function (cont) {
        obj.controls[cont.id] = new Control(cont);
        obj.controlsList.push(obj.controls[cont.id]);
    });

    // variables
    _.each(datas.controller.variables, function (variable) {
        obj.variables[variable.id] = new Variable(variable);
    });

    // actions
    _.each(datas.controller.actions, function (act) {
        obj.actions[act.id] = new Action(act);
    });

    // conditions
    _.each(datas.controller.conditions, function (cond) {
        obj.conditions[cond.id] = new Condition(cond);
    });

    // conditional group states
    _.each(datas.layout.conditionalgroupstates, function (cgs) {
        obj.conditionalGroupStates[cgs.id] = new ConditionalGroupState(cgs);
        obj.groupStates[cgs.id] = obj.conditionalGroupStates[cgs.id];
    });
    
    // sequences
    _.each(datas.layout.sequences, function (seq) {
        obj.sequences[seq.id] = new Sequence(seq);
    });

    // triggers
    _.each(datas.controller.triggers, function (trigger) {
        obj.triggers[trigger.id] = new Trigger(trigger);
    });


    this.gameStart = function () {

        _.each(datas.controller.initactions, function (action) {
            manager.actions[action].launch();
        });
        
        _.each(datas.controller.inittriggers, function (trigger) {
            manager.triggers[trigger].enable();
        });
    };

    this.showAll = function () {
        _.each(obj.spritesList, function (sprite) {
            sprite.enable();
        });
    };

    this.hideAll = function () {
        _.each(obj.spritesList, function (sprite) {
            sprite.disable();
        });
    };
};


